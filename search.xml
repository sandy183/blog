<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[UIview属性]]></title>
      <url>http://sajinwu.github.io/20151125UIview%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<h1 id="UIview的属性">UIview的属性</h1><p>今天突然发现每次遇到View的内容填充问题时都需要上网去查，索性直接自己记下来，省的下次去查了</p>
<h2 id="UIViewContentMode的含义">UIViewContentMode的含义</h2><pre><code><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UIViewContentMode</span>) {
    <span class="built_in">UIViewContentModeScaleToFill</span>,       <span class="comment">// 默认项，完全填充</span>
    <span class="built_in">UIViewContentModeScaleAspectFit</span>,    <span class="comment">// 保持比例，以长边填满（不会溢出）</span>
    <span class="built_in">UIViewContentModeScaleAspectFill</span>,   <span class="comment">// 保持比例，以短边填满（可能溢出）</span>
    <span class="built_in">UIViewContentModeRedraw</span>,            <span class="comment">// 在调用了setNeedsDisplay方法之后会重绘</span>
    <span class="built_in">UIViewContentModeCenter</span>,            <span class="comment">// 居中显示，大小不变</span>
    <span class="built_in">UIViewContentModeTop</span>,               <span class="comment">// 靠上显示，大小不变</span>
    <span class="built_in">UIViewContentModeBottom</span>,            <span class="comment">// 靠下显示，大小不变</span>
       <span class="built_in">UIViewContentModeLeft</span>,           <span class="comment">// 靠左显示，大小不变 </span>
    <span class="built_in">UIViewContentModeRight</span>,             <span class="comment">// 靠右显示，大小不变</span>
    <span class="built_in">UIViewContentModeTopLeft</span>,           <span class="comment">// 左上显示，大小不变</span>
    <span class="built_in">UIViewContentModeTopRight</span>,          <span class="comment">// 右上显示，大小不变</span>
    <span class="built_in">UIViewContentModeBottomLeft</span>,        <span class="comment">// 左下显示，大小不变</span>
    <span class="built_in">UIViewContentModeBottomRight</span>,       <span class="comment">// 右下显示，大小不变</span>
};
</code></pre><p>今天就记这么多吧，想起来再记</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LLDB调试命令-个人用无序版]]></title>
      <url>http://sajinwu.github.io/20151113LLDB%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4-%E4%B8%AA%E4%BA%BA%E7%94%A8%E6%97%A0%E5%BA%8F%E7%89%88/</url>
      <content type="html"><![CDATA[<p>使用前提：<br>1.既然是调试命令，理所当然的，程序模式应该选择Debug模式。<br>2.在Debug模式下，如果你的程序在运行中崩溃（Crash）掉，那么恭喜你，使用lldb调试的机会来了。</p>
<h5 id="bt_:_打印出最后一次调用堆栈信息">bt : 打印出最后一次调用堆栈信息</h5><h5 id="set:设置临时断点">set:设置临时断点</h5><p>用法:</p>
<ul>
<li>如果想在<strong>某个文件中的某行</strong>设置一个断点，可使用以下命令:</li>
</ul>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(lldb) <span class="built_in">breakpoint</span> <span class="built_in">set</span> <span class="comment">--file foo.c --line 12</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果想给某个<strong>函数</strong>设置断点，可使用以下命令：</li>
</ul>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(lldb) <span class="built_in">breakpoint</span> <span class="built_in">set</span> <span class="comment">--name foo</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果想给<strong>C++</strong>中所有命名为foo的方法设置断点，可以使用以下命令：</li>
</ul>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(lldb) breakpoint <span class="type">set</span> --<span class="keyword">method</span> foo</span><br></pre></td></tr></table></figure>
<ul>
<li>如果想给<strong>Objective-C</strong>中所有命名为alignLeftEdges:的选择器设置断点，则可以使用以下命令：</li>
</ul>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(lldb) <span class="built_in">breakpoint</span> <span class="built_in">set</span> <span class="comment">--selector alignLeftEdges:</span></span><br></pre></td></tr></table></figure>
<ul>
<li>我们可以使用<strong>—shlib</strong> 来将断点限定在一个特定的可执行库中：</li>
</ul>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(lldb) <span class="built_in">breakpoint</span> <span class="built_in">set</span> <span class="comment">--shlib foo.dylib --name foo</span></span><br></pre></td></tr></table></figure>
<p>看吧，断点设置命令还是很强大的。</p>
<a id="more"></a>
<p>如果我们想查看程序中所有的断点，则可以使用breakpoint list命令，如下所示:</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(lldb) breakpoint <span class="keyword">list</span></span><br><span class="line">Current breakpoints:</span><br><span class="line">1: <span class="keyword">file</span> = '../Business/MainView/controller/HomePageViewController.<span class="keyword">m</span>', <span class="keyword">line</span> = 146, locations = 1, resolved = 1, hit <span class="keyword">count</span> = 1</span><br><span class="line">  1.1: where = Recruitment`-[HomePageViewController createTableView] + 495 at HomePageViewController.<span class="keyword">m</span>:146, address = 0x000000010c4dccdf, resolved, hit <span class="keyword">count</span> = 1</span><br></pre></td></tr></table></figure>
<p>从上面的输出结果可以看出，一个断点一般有两部分：</p>
<p>1.断点的逻辑规范，这一部分是用户提供给breakpoint set命令的。<br>2.与规范匹配的断点的位置。</p>
<p>breakpoint list命令输出列表显示每个逻辑断点都有一个整数标识，如上所示断点标识为1。而每个位置也会有一个标识，如上所示的1.1<br> 不管是逻辑断点产生的所有位置，还是逻辑断点解析的任何特定位置，我们都可以使用断点触发命令来对其进行删除、禁用、设置条件或忽略计数操作。例如，如果我们想添加一个命令，以在LLDB命中断点1.1时打印跟踪栈，则可以执行以下命令:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(lldb) <span class="built_in">breakpoint</span> <span class="command"><span class="keyword">command</span> <span class="title">add</span> <span class="title">1</span><span class="number">.1</span></span></span><br><span class="line"> Enter your debugger <span class="command"><span class="keyword">command</span>(<span class="title">s</span>). <span class="title">Type</span> <span class="string">'DONE'</span> <span class="title">to</span> <span class="title">end</span>.</span></span><br><span class="line">\ bt</span><br><span class="line">\ DONE</span><br></pre></td></tr></table></figure>
<p>如果想更详细地了解”breakpoint command add”命令的使用，可以使用help帮助系统来查看</p>
<p>当然这里记了这么多，没什么乱用，因为真正会在终端下使用<strong>LLDB</strong>的人会看我的笔记？咱们还是看看<strong>Xcode</strong>里面怎么用吧</p>
<ul>
<li>打印-最实用的，<br>打印变量的值可以使用print命令，该命令如果打印的是简单类型，则会列出简单类型的类型和值。如果是对象，还会打印出对象指针地址，如下所示：</li>
</ul>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(lldb) print a</span><br><span class="line">(NSInteger) <span class="variable">$0</span> = <span class="number">0</span></span><br><span class="line">(lldb) print b</span><br><span class="line">(NSInteger) <span class="variable">$1</span> = <span class="number">0</span></span><br><span class="line">(lldb) print str</span><br><span class="line">(NSString *) <span class="variable">$2</span> = <span class="number">0x0000000100001048</span> @<span class="string">"abc"</span></span><br><span class="line">(lldb) print url</span><br><span class="line">(NSURL *) <span class="variable">$3</span> = <span class="number">0x0000000100206cc0</span> @<span class="string">"abc"</span></span><br></pre></td></tr></table></figure>
<p>在输出结果中我们还能看到类似于\$0,\$1这样的符号，我们可以将其看作是指向对象的一个引用，我们在控制面板中可以直接使用这个符号来操作对应的对象，这些东西存在于LLDB的全名空间中，目的是为了辅助调试。如下所示:</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(lldb) exp <span class="variable">$0</span> = <span class="number">100</span> </span><br><span class="line"></span><br><span class="line">(NSInteger) <span class="variable">$9</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">(lldb) p a</span><br><span class="line">(NSInteger) <span class="variable">$10</span> = <span class="number">100</span></span><br></pre></td></tr></table></figure>
<p>另外$后面的数值是递增的，每打印一个与对象相关的命令，这个值都会加1<br>上面的print命令会打印出对象的很多信息，如果我们只想查看对象的值的信息，则可以使用po(print object的缩写)命令，如下所示：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">lldb</span>)</span>po str</span><br><span class="line">abc</span><br></pre></td></tr></table></figure>
<p>当然，po命令是”exp -O —“命令的别名，使用”exp -O —”能达到同样的效果<br>对于简单类型，我们还可以为其指定不同的打印格式，其命令格式是print/，如下所示：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lldb) p/x a</span><br><span class="line">(NSInteger) <span class="variable">$13</span> = <span class="number">0x0000000000000064</span></span><br></pre></td></tr></table></figure>
<p>格式的完整清单可以参考<a href="https://sourceware.org/gdb/onlinedocs/gdb/Output-Formats.html" target="_blank" rel="external">Output Formats</a></p>
<ul>
<li>expression</li>
</ul>
<p>在开发中，我们经常会遇到这样一种情况：我们设置一个视图的背景颜色，运行后发现颜色不好看。嗯，好吧，在代码里面修改一下，再编译运行一下，嗯，还是不好看，然后再修改吧～～这样无形中浪费了我们大把的时间。在这种情况下，expression命令强大的功能就能体现出来了，它不仅会改变调试器中的值，还改变了程序中的实际值。我们先来看看实际效果，如下所示:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(lldb) <span class="built_in">exp</span> a = <span class="number">10</span></span><br><span class="line">(NSInteger) $<span class="number">0</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">(lldb) <span class="built_in">exp</span> b = <span class="number">100</span></span><br><span class="line">(NSInteger) $<span class="number">1</span> = <span class="number">100</span></span><br><span class="line"><span class="number">2015</span>-<span class="number">01</span>-<span class="number">25</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">41.313</span> test[<span class="number">18064</span>:<span class="number">71466</span>] a + b = <span class="number">110</span>, abc</span><br></pre></td></tr></table></figure>
<p>expression命令的功能不仅于此，正如上面的po命令，其实际也是”expression -O —“命令的别名。更详细使用可以参考<a href="https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/gdb_to_lldb_transition_guide/document/lldb-command-examples.html#//apple_ref/doc/uid/TP40012917-CH3-SW5" target="_blank" rel="external">Evaluating Expressions</a>.</p>
<ul>
<li>image(并非图片)</li>
</ul>
<p>image命令的用法也挺多，首先可以用它来查看工程中使用的库，如下所示：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(lldb) image list</span><br><span class="line">[  <span class="number">0</span>] <span class="number">432</span>A6EBF-<span class="constant">B9D2</span>-<span class="number">3850</span>-<span class="constant">BCB2</span>-<span class="number">821</span>B9E62B1E0 <span class="number">0x0000000100000000</span> /<span class="constant">Users</span>/**<span class="regexp">/Library/</span><span class="constant">Developer</span>/<span class="constant">Xcode</span>/<span class="constant">DerivedData</span>/test-byjqwkhxixddxudlnvqhrfughkra/<span class="constant">Build</span>/<span class="constant">Products</span>/<span class="constant">Debug</span>/test </span><br><span class="line">[  <span class="number">1</span>] <span class="number">65</span>DCCB06-<span class="number">339</span>C-<span class="number">3E25</span>-<span class="number">9702</span>-<span class="number">600</span>A28291D0E <span class="number">0x00007fff5fc00000</span> /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">dyld</span> </span></span><br><span class="line">[  <span class="number">2</span>] <span class="constant">E3746EDD</span>-<span class="constant">DFB1</span>-<span class="number">3</span>ECB-<span class="number">88</span>ED-<span class="constant">A91AC0EF3AAA</span> <span class="number">0x00007fff8d324000</span> /<span class="constant">System</span>/<span class="constant">Library</span>/<span class="constant">Frameworks</span>/<span class="constant">Foundation</span>.framework/<span class="constant">Versions</span>/<span class="constant">C</span>/<span class="constant">Foundation</span> </span><br><span class="line">[  <span class="number">3</span>] <span class="number">759E155</span>D-<span class="constant">BC42</span>-<span class="number">3</span>D4E-<span class="number">869</span>B-<span class="number">6</span>F57D477177C <span class="number">0x00007fff8869f000</span> /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">libobjc</span>.<span class="title">A</span>.<span class="title">dylib</span> </span></span><br><span class="line">[  <span class="number">4</span>] <span class="number">5</span>C161F1A-<span class="number">93</span>BA-<span class="number">3221</span>-<span class="constant">A31D</span>-<span class="constant">F86222005B1B</span> <span class="number">0x00007fff8c75c000</span> /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">libSystem</span>.<span class="title">B</span>.<span class="title">dylib</span> </span></span><br><span class="line">[  <span class="number">5</span>] <span class="constant">CBD1591C</span>-<span class="number">405E-376</span>E-<span class="number">87E9</span>-<span class="constant">B264610EBF49</span> <span class="number">0x00007fff8df0d000</span> /<span class="constant">System</span>/<span class="constant">Library</span>/<span class="constant">Frameworks</span>/<span class="constant">CoreFoundation</span>.framework/<span class="constant">Versions</span>/<span class="constant">A</span>/<span class="constant">CoreFoundation</span> </span><br><span class="line">[  <span class="number">6</span>] <span class="constant">A260789B</span>-<span class="constant">D4D8</span>-<span class="number">316</span>A-<span class="number">9490</span>-<span class="number">254767</span>B8A5F1 <span class="number">0x00007fff8de36000</span> /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">libauto</span>.<span class="title">dylib</span></span></span><br></pre></td></tr></table></figure>
<p>我们还可以用它来查找可执行文件或共享库的原始地址，这一点还是很有用的，当我们的程序崩溃时，我们可以使用这条命令来查找崩溃所在的具体位置，如下所示：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">NSArray</span> *array = <span class="annotation">@[<span class="variable">@1</span>, <span class="variable">@2</span>]</span>;</span><br><span class="line"><span class="constant">NSLog</span>(@<span class="string">"item 3: %@"</span>, array[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure>
<p>这段代码在运行后会抛出如下异常：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2015-01-25</span> <span class="number">14:12:01.00</span>7 test[<span class="number">18122:76474</span>] *** Terminating app due to uncaught exception 'NSRangeException', reason: '*** -[__NSArrayI objectAtIndex:]: index 2 beyond bounds [0 .. 1]'</span><br><span class="line">*** First throw call stack:</span><br><span class="line">(</span><br><span class="line">    0   CoreFoundation                      <span class="number">0x00007</span>fff8e06f66c __exceptionPreprocess + 172</span><br><span class="line">   1   libobjc.<span class="keyword">A</span>.dylib                     <span class="number">0x00007</span>fff886ad76e objc_exception_throw + 43</span><br><span class="line">   2   CoreFoundation                      <span class="number">0x00007</span>fff8df487de -[__NSArrayI objectAtIndex:] + 190</span><br><span class="line">   3   test                                <span class="number">0x00000001</span>00000de0 main + 384</span><br><span class="line">    4   libdyld.dylib                       <span class="number">0x00007</span>fff<span class="number">8f1b65c9</span> start + 1</span><br><span class="line">)</span><br><span class="line">libc++abi.dylib: terminating with uncaught exception of type NSException</span><br></pre></td></tr></table></figure>
<p>根据以上信息，我们可以判断崩溃位置是在main.m文件中，要想知道具体在哪一行，可以使用以下命令：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(lldb) image lookup --address <span class="number">0x0000000100000de0</span></span><br><span class="line">    Address: test[<span class="number">0x0000000100000de0</span>] (test.__TEXT.__text + <span class="number">384</span>)</span><br><span class="line">   Summary: test`main + <span class="number">384</span> at main.m:<span class="number">23</span></span><br></pre></td></tr></table></figure>
<p>可以看到，最后定位到了main.m文件的第23行，正是我们代码所在的位置。<br>我们还可以使用image lookup命令来查看具体的类型，如下所示:</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">(lldb) image lookup --type NSURL</span><br><span class="line"> Best match found in /Users/**/Library/Developer/Xcode/DerivedData/test-byjqwkhxixddxudlnvqhrfughkra/Build/Products/Debug/test:</span><br><span class="line"> id = &#123;<span class="number">0x100000157</span>&#125;, name = "NSURL", byte-size = 40, decl = NSURL.h:17, clang_type = "@interface NSURL : NSObject&#123;</span><br><span class="line">    NSString * _urlString<span class="comment">;</span></span><br><span class="line">    NSURL * _baseURL<span class="comment">;</span></span><br><span class="line">    void * _clients<span class="comment">;</span></span><br><span class="line">    void * _reserved<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">@property ( readonly,getter = absoluteString,setter = &lt;null selector,nonatomic ) NSString * absoluteString<span class="comment">;</span></span><br><span class="line">@property ( readonly,getter = relativeString,setter = &lt;null selector,nonatomic ) NSString * relativeString<span class="comment">;</span></span><br><span class="line">@property ( readonly,getter = baseURL,setter = &lt;null selector,nonatomic ) NSURL * baseURL<span class="comment">;</span></span><br><span class="line">@property ( readonly,getter = absoluteURL,setter = &lt;null selector,nonatomic ) NSURL * absoluteURL<span class="comment">;</span></span><br><span class="line">@property ( readonly,getter = scheme,setter = &lt;null selector,nonatomic ) NSString * scheme<span class="comment">;</span></span><br><span class="line">@property ( readonly,getter = resourceSpecifier,setter = &lt;null selector,nonatomic ) NSString * resourceSpecifier<span class="comment">;</span></span><br><span class="line">@property ( readonly,getter = host,setter = &lt;null selector,nonatomic ) NSString * host<span class="comment">;</span></span><br><span class="line">@property ( readonly,getter = port,setter = &lt;null selector,nonatomic ) NSNumber * port<span class="comment">;</span></span><br><span class="line">@property ( readonly,getter = user,setter = &lt;null selector,nonatomic ) NSString * user<span class="comment">;</span></span><br><span class="line">@property ( readonly,getter = password,setter = &lt;null selector,nonatomic ) NSString * password<span class="comment">;</span></span><br><span class="line">@property ( readonly,getter = path,setter = &lt;null selector,nonatomic ) NSString * path<span class="comment">;</span></span><br><span class="line">@property ( readonly,getter = fragment,setter = &lt;null selector,nonatomic ) NSString * fragment<span class="comment">;</span></span><br><span class="line">@property ( readonly,getter = parameterString,setter = &lt;null selector,nonatomic ) NSString * parameterString<span class="comment">;</span></span><br><span class="line">@property ( readonly,getter = query,setter = &lt;null selector,nonatomic ) NSString * query<span class="comment">;</span></span><br><span class="line">@property ( readonly,getter = relativePath,setter = &lt;null selector,nonatomic ) NSString * relativePath<span class="comment">;</span></span><br><span class="line">@property ( readonly,getter = fileSystemRepresentation,setter = &lt;null selector ) const char * fileSystemRepresentation<span class="comment">;</span></span><br><span class="line">@property ( readonly,getter = isFileURL,setter = &lt;null selector,readwrite ) BOOL fileURL<span class="comment">;</span></span><br><span class="line">@property ( readonly,getter = standardizedURL,setter = &lt;null selector,nonatomic ) NSURL * standardizedURL<span class="comment">;</span></span><br><span class="line">@property ( readonly,getter = filePathURL,setter = &lt;null selector,nonatomic ) NSURL * filePathURL<span class="comment">;</span></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p>可以看到，输出结果中列出了NSURL的一些成员变量及属性信息。<br>image命令还有许多其它功能，具体可以参考<a href="https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/gdb_to_lldb_transition_guide/document/lldb-command-examples.html#//apple_ref/doc/uid/TP40012917-CH3-SW5" target="_blank" rel="external">Executable and Shared Library Query Commands</a>;</p>
<p>LLDB 还有很多功能，暂时没有研究就记这么多吧！</p>
<p>参考资料：</p>
<p>[1] <a href="http://lldb.llvm.org/tutorial.html" target="_blank" rel="external">The LLDB Debugger</a></p>
<p>[2]<a href="https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/gdb_to_lldb_transition_guide/document/Introduction.html" target="_blank" rel="external">LLDB Quick Start Guide</a></p>
<p>[3]<a href="http://www.cocoachina.com/ios/20141219/10709.html" target="_blank" rel="external">与调试器共舞 – LLDB 的华尔兹</a></p>
<p>[4]<a href="http://www.starfelix.com/blog/2014/03/17/lldbdiao-shi-ming-ling-chu-tan/" target="_blank" rel="external">LLDB调试命令初探</a></p>
<p>[5]<a href="http://www.cocoachina.com/ios/20140530/8619.html" target="_blank" rel="external">NSLog效率低下的原因及尝试lldb断点打印Log</a></p>
<p>[6]<a href="http://www.cocoachina.com/ios/20150126/11021.html" target="_blank" rel="external">浅谈LLDB调试器</a></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我的第一篇博文]]></title>
      <url>http://sajinwu.github.io/20151111%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/</url>
      <content type="html"><![CDATA[<h2 id="第一篇博文主要干三件事">第一篇博文主要干三件事</h2><ul>
<li><strong>记一下博客平台的搭建过程</strong></li>
<li><strong>说说有了博客以后要干什么</strong></li>
<li><strong>markdown语法范例</strong></li>
</ul>
<hr>
<h3 id="记一下博客平台的搭建过程">记一下博客平台的搭建过程</h3><ul>
<li>安装</li>
</ul>
<p>前提是必须先安装 Node.js</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$: npm <span class="operator"><span class="keyword">install</span> hexo -<span class="keyword">g</span></span></span><br></pre></td></tr></table></figure>
<p>仅需一步就把 Hexo 本体和所有相依套件安装完毕，很简单吧？</p>
<a id="more"></a>
<ul>
<li>升级</li>
</ul>
<p>更新hexo到最新版</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$: npm <span class="operator"><span class="keyword">update</span> hexo -<span class="keyword">g</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>初始化</li>
</ul>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">$:</span> hexo init</span><br></pre></td></tr></table></figure>
<p>如果指定 <folder>，便会在目前的资料夹建立一个名为 <folder> 的新资料夹；否则会在目前资料夹初始化。</folder></folder></p>
<ul>
<li>创建新博客</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$:</span> hexo <span class="keyword">new</span> <span class="string">"Hello World"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>生成网站</li>
</ul>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">$:</span> hexo generate</span><br></pre></td></tr></table></figure>
<ul>
<li>启动本地服务器</li>
</ul>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">$:</span> hexo server</span><br></pre></td></tr></table></figure>
<p>伺服器会跑在 <a href="http://localhost:port" target="_blank" rel="external">http://localhost:port</a> （port 预设为 4000，可在 _config.yml 设定），也可以搭配 Pow 使用：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~/.<span class="built_in">pow</span></span><br><span class="line"><span class="keyword">ln</span> -<span class="keyword">s</span> /path/<span class="keyword">to</span>/myapp</span><br></pre></td></tr></table></figure><br>基本使用差不多就是这样子，非常简单。</p>
<hr>
<h3 id="如果你想发布到github上呢">如果你想发布到github上呢</h3><ul>
<li>先注册账号<br>账号相信你已经有了，登录 -&gt; 绑定ssh-key -&gt; 这里不说这些，<a href="http://blog.csdn.net/binyao02123202/article/details/20130891" target="_blank" rel="external">这里有</a></li>
<li><p>建立项目<br>命名规侧：github.user.io</p>
</li>
<li><p>配置hexo<br>打开blog目录下的_config.yml,找到</p>
</li>
</ul>
<pre><code><span class="attribute">deploy</span>:
    <span class="attribute">type</span>: git <span class="comment">// 不要写github,在3.0之后不允许写github了</span>
    <span class="attribute">repo</span>: <span class="comment">// 你的git库地址</span>
    <span class="attribute">branch</span>: <span class="comment">// 分支，一般直接使用默认的master分支</span>
</code></pre><p>在配置好了这几个之后，还有一件很重要的事儿要做，那就是安装hexo专用git<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="operator"><span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure><br>装好之后剩下的事儿就简单了，生成静态网站之后，执行：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo deploy</span><br></pre></td></tr></table></figure><br>然后你就能看到你的博客了，user.github.io<br>就记这么多吧，足以使用了</p>
<hr>
<h3 id="有了博客我要干什么">有了博客我要干什么</h3><ul>
<li>发一些自己在开发中的心得体会</li>
<li>摘录一些别人写的好东西</li>
<li>全当笔记用</li>
</ul>
<hr>
<h3 id="markdown语法范例">markdown语法范例</h3><h1 id="一级标题">一级标题</h1><h2 id="二级标题">二级标题</h2><h6 id="六级标题">六级标题</h6><p>@(示例笔记本)[马克飞象|帮助|Markdown]</p>
<p><strong>马克飞象</strong>是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述：</p>
<ul>
<li><strong>功能丰富</strong> ：支持高亮代码块、<em>LaTeX</em> 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手；</li>
<li><strong>得心应手</strong> ：简洁高效的编辑器，提供<a href="http://maxiang.info/client_zh" target="_blank" rel="external">桌面客户端</a>以及<a href="https://chrome.google.com/webstore/detail/kidnkfckhbdkfgbicccmdggmpgogehop" target="_blank" rel="external">离线Chrome App</a>，支持移动端 Web；</li>
<li><strong>深度整合</strong> ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。</li>
</ul>
<hr>
<p>[TOC]</p>
<h2 id="Markdown简介">Markdown简介</h2><blockquote>
<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="external">维基百科</a></p>
</blockquote>
<p>正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href="http://www.example.com" target="_blank" rel="external">链接</a>或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按<code>Cmd + /</code>查看帮助。 </p>
<h3 id="代码块">代码块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="decorator">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="keyword">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span><br><span class="line"><span class="prompt">... </span>prompt'''</span></span><br></pre></td></tr></table></figure>
<h3 id="LaTeX_公式">LaTeX 公式</h3><p>可以创建行内公式，例如 $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。或者块级公式：</p>
<p>$$    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p>
<h3 id="表格">表格</h3><table>
<thead>
<tr>
<th style="text-align:left">Item</th>
<th style="text-align:right">Value</th>
<th style="text-align:center">Qty</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Computer</td>
<td style="text-align:right">1600 USD</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:left">Phone</td>
<td style="text-align:right">12 USD</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td style="text-align:left">Pipe</td>
<td style="text-align:right">1 USD</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<h3 id="流程图">流程图</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st=&#62;start: Start&#10;e=&#62;end&#10;op=&#62;operation: My Operation&#10;cond=&#62;condition: Yes or No?&#10;&#10;st-&#62;op-&#62;cond&#10;cond(yes)-&#62;e&#10;cond(no)-&#62;op</span><br></pre></td></tr></table></figure>
<p>以及时序图:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Alice-&#62;Bob: Hello Bob, how are you?&#10;Note right of Bob: Bob thinks&#10;Bob--&#62;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>提示：</strong>想了解更多，请查看<strong>流程图</strong><a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="external">语法</a>以及<strong>时序图</strong><a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="external">语法</a>。</p>
</blockquote>
<h3 id="复选框">复选框</h3><p>使用 <code>- [ ]</code> 和 <code>- [x]</code> 语法可以创建复选框，实现 todo-list 等功能。例如：</p>
<ul>
<li>[x] 已完成事项</li>
<li>[ ] 待办事项1</li>
<li>[ ] 待办事项2</li>
</ul>
<blockquote>
<p><strong>注意：</strong>目前支持尚不完全，在印象笔记中勾选复选框是无效、不能同步的，所以必须在<strong>马克飞象</strong>中修改 Markdown 原文才可生效。下个版本将会全面支持。</p>
</blockquote>
<h2 id="印象笔记相关">印象笔记相关</h2><h3 id="笔记本和标签">笔记本和标签</h3><p><strong>马克飞象</strong>增加了<code>@(笔记本)[标签A|标签B]</code>语法, 以选择笔记本和添加标签。 <strong>绑定账号后</strong>， 输入<code>(</code>自动会出现笔记本列表，请从中选择。</p>
<h3 id="笔记标题">笔记标题</h3><p><strong>马克飞象</strong>会自动使用文档内出现的第一个标题作为笔记标题。例如本文，就是第一行的 <code>欢迎使用马克飞象</code>。</p>
<h3 id="快捷编辑">快捷编辑</h3><p>保存在印象笔记中的笔记，右上角会有一个红色的编辑按钮，点击后会回到<strong>马克飞象</strong>中打开并编辑该笔记。</p>
<blockquote>
<p><strong>注意：</strong>目前用户在印象笔记中单方面做的任何修改，马克飞象是无法自动感知和更新的。所以请务必回到马克飞象编辑。</p>
</blockquote>
<h3 id="数据同步">数据同步</h3><p><strong>马克飞象</strong>通过<strong>将Markdown原文以隐藏内容保存在笔记中</strong>的精妙设计，实现了对Markdown的存储和再次编辑。既解决了其他产品只是单向导出HTML的单薄，又规避了服务端存储Markdown带来的隐私安全问题。这样，服务端仅作为对印象笔记 API调用和数据转换之用。</p>
<blockquote>
<p><strong>隐私声明：用户所有的笔记数据，均保存在印象笔记中。马克飞象不存储用户的任何笔记数据。</strong></p>
</blockquote>
<h3 id="离线存储">离线存储</h3><p><strong>马克飞象</strong>使用浏览器离线存储将内容实时保存在本地，不必担心网络断掉或浏览器崩溃。为了节省空间和避免冲突，已同步至印象笔记并且不再修改的笔记将删除部分本地缓存，不过依然可以随时通过<code>文档管理</code>打开。</p>
<blockquote>
<p><strong>注意：</strong>虽然浏览器存储大部分时候都比较可靠，但印象笔记作为专业云存储，更值得信赖。以防万一，<strong>请务必经常及时同步到印象笔记</strong>。</p>
</blockquote>
<h2 id="编辑器相关">编辑器相关</h2><h3 id="设置">设置</h3><p>右侧系统菜单（快捷键<code>Cmd + M</code>）的<code>设置</code>中，提供了界面字体、字号、自定义CSS、vim/emacs 键盘模式等高级选项。</p>
<h3 id="快捷键">快捷键</h3><p>帮助    <code>Cmd + /</code><br>同步文档    <code>Cmd + S</code><br>创建文档    <code>Cmd + Opt + N</code><br>最大化编辑器    <code>Cmd + Enter</code><br>预览文档 <code>Cmd + Opt + Enter</code><br>文档管理    <code>Cmd + O</code><br>系统菜单    <code>Cmd + M</code> </p>
<p>加粗    <code>Cmd + B</code><br>插入图片    <code>Cmd + G</code><br>插入链接    <code>Cmd + L</code><br>提升标题    <code>Cmd + H</code></p>
<h2 id="关于收费">关于收费</h2><p><strong>马克飞象</strong>为新用户提供 10 天的试用期，试用期过后需要<a href="maxiang.info/vip.html">续费</a>才能继续使用。未购买或者未及时续费，将不能同步新的笔记。之前保存过的笔记依然可以编辑。</p>
<h2 id="反馈与建议">反馈与建议</h2><ul>
<li>微博：<a href="http://weibo.com/u/2788354117" target="_blank" rel="external">@马克飞象</a>，<a href="http://weibo.com/ggock" title="开发者个人账号" target="_blank" rel="external">@GGock</a></li>
<li>邮箱：<a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#111;&#x3a;&#x68;&#117;&#x73;&#116;&#x67;&#111;&#x63;&#107;&#64;&#x67;&#109;&#97;&#x69;&#108;&#46;&#99;&#111;&#109;">&#x68;&#117;&#x73;&#116;&#x67;&#111;&#x63;&#107;&#64;&#x67;&#109;&#97;&#x69;&#108;&#46;&#99;&#111;&#109;</a></li>
</ul>
<hr>
<p>感谢阅读这份帮助文档。请点击右上角，绑定印象笔记账号，开启全新的记录与分享体验吧。</p>
<p>[^demo]: 这是一个示例脚注。请查阅 <a href="https://github.com/fletcher/MultiMarkdown/wiki/MultiMarkdown-Syntax-Guide#footnotes" target="_blank" rel="external">MultiMarkdown 文档</a> 关于脚注的说明。 <strong>限制：</strong> 印象笔记的笔记内容使用 <a href="https://dev.yinxiang.com/doc/articles/enml.php" target="_blank" rel="external">ENML</a> 格式，基于 HTML，但是不支持某些标签和属性，例如id，这就导致<code>脚注</code>和<code>TOC</code>无法正常点击。</p>]]></content>
    </entry>
    
  
  
</search>
